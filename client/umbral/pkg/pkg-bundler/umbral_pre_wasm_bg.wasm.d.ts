/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_random(): number;
export function secretkey_publicKey(a: number): number;
export function secretkey_toSecretBytes(a: number, b: number): void;
export function secretkey_fromBytes(a: number, b: number): number;
export function secretkey_toString(a: number, b: number): void;
export function __wbg_secretkeyfactory_free(a: number): void;
export function secretkeyfactory_random(): number;
export function secretkeyfactory_seedSize(): number;
export function secretkeyfactory_fromSecureRandomness(a: number, b: number): number;
export function secretkeyfactory_makeKey(a: number, b: number, c: number): number;
export function secretkeyfactory_makeFactory(a: number, b: number, c: number): number;
export function secretkeyfactory_toSecretBytes(a: number, b: number): void;
export function secretkeyfactory_fromBytes(a: number, b: number): number;
export function secretkeyfactory_toString(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_toBytes(a: number, b: number): void;
export function publickey_fromBytes(a: number, b: number): number;
export function publickey_toString(a: number, b: number): void;
export function publickey_equals(a: number, b: number): number;
export function signer_new(a: number): number;
export function signer_sign(a: number, b: number, c: number): number;
export function signer_verifyingKey(a: number): number;
export function signer_toString(a: number, b: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_verify(a: number, b: number, c: number, d: number): number;
export function signature_toBytes(a: number, b: number): void;
export function signature_fromBytes(a: number, b: number): number;
export function signature_toString(a: number, b: number): void;
export function signature_equals(a: number, b: number): number;
export function __wbg_capsule_free(a: number): void;
export function capsule_withCFrag(a: number, b: number): number;
export function capsule_toBytes(a: number, b: number): void;
export function capsule_fromBytes(a: number, b: number): number;
export function capsule_toString(a: number, b: number): void;
export function capsule_equals(a: number, b: number): number;
export function __wbg_capsulefrag_free(a: number): void;
export function capsulefrag_verify(a: number, b: number, c: number, d: number, e: number): number;
export function capsulefrag_toBytes(a: number, b: number): void;
export function capsulefrag_fromBytes(a: number, b: number): number;
export function capsulefrag_toString(a: number, b: number): void;
export function capsulefrag_equals(a: number, b: number): number;
export function verifiedcapsulefrag_fromVerifiedBytes(a: number, b: number): number;
export function verifiedcapsulefrag_toBytes(a: number, b: number): void;
export function verifiedcapsulefrag_toString(a: number, b: number): void;
export function __wbg_capsulewithfrags_free(a: number): void;
export function capsulewithfrags_withCFrag(a: number, b: number): number;
export function capsulewithfrags_decryptReencrypted(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_encryptionresult_free(a: number): void;
export function __wbg_get_encryptionresult_capsule(a: number): number;
export function __wbg_set_encryptionresult_capsule(a: number, b: number): void;
export function encryptionresult_ciphertext(a: number, b: number): void;
export function encrypt(a: number, b: number, c: number): number;
export function decryptOriginal(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_keyfrag_free(a: number): void;
export function keyfrag_verify(a: number, b: number): number;
export function keyfrag_verifyWithDelegatingKey(a: number, b: number, c: number): number;
export function keyfrag_verifyWithReceivingKey(a: number, b: number, c: number): number;
export function keyfrag_verifyWithDelegatingAndReceivingKeys(a: number, b: number, c: number, d: number): number;
export function keyfrag_toBytes(a: number, b: number): void;
export function keyfrag_fromBytes(a: number, b: number): number;
export function keyfrag_toString(a: number, b: number): void;
export function keyfrag_equals(a: number, b: number): number;
export function verifiedkeyfrag_fromVerifiedBytes(a: number, b: number): number;
export function verifiedkeyfrag_toBytes(a: number, b: number): void;
export function verifiedkeyfrag_toString(a: number, b: number): void;
export function generateKFrags(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function reencrypt(a: number, b: number): number;
export function __wbg_verifiedcapsulefrag_free(a: number): void;
export function __wbg_verifiedkeyfrag_free(a: number): void;
export function verifiedcapsulefrag_equals(a: number, b: number): number;
export function verifiedkeyfrag_equals(a: number, b: number): number;
export function __wbg_signer_free(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_exn_store(a: number): void;
