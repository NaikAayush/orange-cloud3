// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class JobEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("type_", Value.fromString(""));
    this.set("cid", Value.fromString(""));
    this.set("available", Value.fromBoolean(false));
    this.set("acceptedBy", Value.fromString(""));
    this.set("numCpus", Value.fromI32(0));
    this.set("memBytes", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JobEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JobEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JobEntity", id.toString(), this);
    }
  }

  static load(id: string): JobEntity | null {
    return changetype<JobEntity | null>(store.get("JobEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get type_(): string {
    let value = this.get("type_");
    return value!.toString();
  }

  set type_(value: string) {
    this.set("type_", Value.fromString(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get available(): boolean {
    let value = this.get("available");
    return value!.toBoolean();
  }

  set available(value: boolean) {
    this.set("available", Value.fromBoolean(value));
  }

  get acceptedBy(): string {
    let value = this.get("acceptedBy");
    return value!.toString();
  }

  set acceptedBy(value: string) {
    this.set("acceptedBy", Value.fromString(value));
  }

  get outputCid(): string | null {
    let value = this.get("outputCid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputCid(value: string | null) {
    if (!value) {
      this.unset("outputCid");
    } else {
      this.set("outputCid", Value.fromString(<string>value));
    }
  }

  get numCpus(): i32 {
    let value = this.get("numCpus");
    return value!.toI32();
  }

  set numCpus(value: i32) {
    this.set("numCpus", Value.fromI32(value));
  }

  get memBytes(): BigInt {
    let value = this.get("memBytes");
    return value!.toBigInt();
  }

  set memBytes(value: BigInt) {
    this.set("memBytes", Value.fromBigInt(value));
  }
}
